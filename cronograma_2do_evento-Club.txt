Repaso de cronograma de evento: 
     üéâ Introducci√≥n y bienvenida
     üíé Taller: Introducci√≥n r√°pida a Git
     üîî Preguntas e ideas
     ‚úåüèº Cierre del evento


Taller: Introducci√≥n r√°pida a Git
¬øQu√© es Git y para qu√© se usa?
   Es un sistema de control de versiones distribuido, utilizado para gestionar y seguir los cambios en el c√≥digo fuente de un proyecto a lo largo del tiempo. Su principal prop√≥sito es permitir que varios desarrolladores trabajen de manera colaborativa en un mismo proyecto, manteniendo un historial de modificaciones, facilitando la gesti√≥n de versiones y reduciendo la posibilidad de errores en el c√≥digo.
    -> Sirve para:
     -Rastrear cambios en el c√≥digo: Permite registrar modificaciones en un proyecto y volver a versiones anteriores si es necesario.
     -Colaboraci√≥n: Facilita el trabajo en equipo al permitir que varias personas trabajen en un mismo proyecto sin conflictos.
     -Ramas y experimentaci√≥n: Puedes crear ramas para probar nuevas funcionalidades sin afectar la versi√≥n principal del proyecto.

√Åreas de trabajo / flujo de trabajo en Git:
    -Directorio de trabajo: donde se realizara todo el trabajo: crear, editar, eliminar y organizar archivos.
    -√Årea de preparaci√≥n: donde est√°n todos los cambios que se quieren agregar a el directorio de trabajo.
    -Repositorio: donde Git almacena permanentemente esos cambios como diferentes versiones del proyecto.

¬øC√≥mo instalar Git?
    -> En Windows: Ir a https://git-scm.com/downloads descargar el instalador y seguir las instrucciones. Muy importante asegurarse de marcar la opci√≥n para a√±adir Git al PATH.
     Una vez instalado ejecutar en la terminal (Bash -recomendada. se instala junto a Git- o PowerShell): git --versi√≥n
    Esto: 1. Nos confirmar√° que tenemos Git instalado. 2. Qu√© versi√≥n del Git tenemos instalada. ‚Üí pueden ver este video https://www.youtube.com/watch?v=WcYTcttEf50

    -> En macOS: ejecutar en la terminal: brew install git  
    Y despu√©s verificar la instalaci√≥n: git --versi√≥n

    -> En Linux(Ubuntu):  Ejecutar en la terminal: sudo apt update sudo apt install git
    Y despu√©s verificar la instalaci√≥n: git --versi√≥n

Configuraci√≥n b√°sica inicial
3.1 Nombre de persona usuaria y correo electr√≥nico: Esta informaci√≥n se usar√° en cada cambio que guardemos en el repositorio. Esta informaci√≥n es particularmente √∫til cuando se trabaja en equipo o se colabora en alg√∫n proyecto.
    git config --global user.name "Tu Nombre"    ‚Üí las comillas si hay que ponerlas
    git config --global user.email "tuemail@ejemplo.com"

    -> Si el nombre se escribe mal, o se decide cambiarlo despu√©s, si se puede üòÅ Solo se debe volver a ejecutar el comando con los nuevos datos.
    git config --global user.name "Tu Nuevo Nombre"
    git config --global user.email "tu-nuevo-email@ejemplo.com"


Inicializar un repositorio local
Para empezar a guardar los cambios en un historial, debemos crear un repositorio local. Para ello ejecutamos el siguiente comando en la terminal dentro del proyecto:
    git init

    -> Si ya ten√≠amos alg√∫n archivo dentro del proyecto(carpeta del proyecto) veremos que este o estos se ponen en color verde, si estamos en VS Code. Esto nos indica que a√∫n no llevamos un seguimiento de esos archivos.

Comenzamos a trabajar con Git:
git add: A√±adir archivos al √°rea de preparaci√≥n (staging √°rea):
    -> Se puede a√±adir archivos individualmente:
      git add esteArchivo.js

    -> O se pueden a√±adir todos los archivos a la vez (esta creo que es la m√°s usada):
      git add .

git commit: Una confirmaci√≥n(commit) es el √∫ltimo paso de nuestro flujo de trabajo de Git. Un commit almacena de forma *permanente* los cambios realizados en el √°rea de preparaci√≥n dentro del repositorio.
    Siempre debemos a√±adir un mensaje claro. 
      git commit -m "crear archivo HTML"

Convenciones est√°ndar para mensajes de commit:
--> ¬°estos son convenciones no reglas!
-Escritos en tiempo presente e imperativo. Por ejemplo: corregir bug en el formulario de login. / a√±adir bot√≥n de cierre de sesi√≥n.
-Deben ser breves (50 caracteres o menos).

git status: se utiliza para conocer el estado actual del repositorio, incluidos los archivos modificados y los archivos nuevos que Git no rastrea.
git status -s : Muestra en una sola l√≠nea el estado del repositorio, como los archivos que se han modificado pero no est√°n al √°rea de preparaci√≥n ni repositorio. La M en rojo indica que se ha modificado pero que no est√° √°rea de preparaci√≥n. La M en verde indica que est√° en el √°rea de preparaci√≥n, lista para ser agregada al repositorio con git commit.

git log: este comando muestra todos los registros de commits de un proyecto, el historial del proyecto. Se muestra lo siguiente para cada commit:
-Un c√≥digo identificador de 40 caracteres, llamado SHA (Secure Hash Algorithm /Algoritmo hash seguro), √∫nico para cada commit, adem√°s de la rama de trabajo en la que estamos (tema para que investiguen en casa solas y solos).
-El autor del commit.
-La fecha y hora del commit.
-El mensaje del commit.
Este comando es particularmente √∫til cuando se necesita volver a consultar una versi√≥n anterior del proyecto. El c√≥digo SHA √∫nico permite identificar un punto en el historial del proyecto al que se gustar√≠a volver.
git log --oneline: muestra el historial de commits del repositorio en una forma simplificada y concisa. Cada commit se presenta en una sola l√≠nea, mostrando el identificador SHA del commit y el mensaje del commit. Esto facilita la visualizaci√≥n r√°pida del historial de commits.

VOLVER HACIA ATR√ÅS: ¬øQu√© hacer si queremos volver en el tiempo? Con Git podemos üòé
git checkout <nombreDeArchivo>: con este comando se restaurar√° el archivo espec√≠fico en su directorio de trabajo para que se vea exactamente como estaba cuando realiz√≥ la √∫ltima confirmaci√≥n. Este comando se usa ANTES de un comando add, cuando el archivo modificado NO est√© en el √°rea de preparaci√≥n.
Se puede usar el comando git diff para ver si la reversi√≥n fue exitosa.

Recuperar un archivo eliminado que ya ha sido commitado üò±
Si se sabe el commit en el que el archivo estaba presentes se puede usar el comando git checkout para obtener el archivo desde un commit anterior as√≠:
git checkout <commit_SHA> -- <ruta_del_archivo_y_nombre_del_archivo>       ---> muy importante los espacios a los lados de --
ejemplo: git checkout 606fb13 -- otro.html

7.4 Si no se sabe el commit SHA, usamos git log para conocerlo.

7.5 Si hacemos un checkout de todo el proyecto (que no lo recomiendo): git checkout <commit SHA> Debemos hacer esto despu√©s para evitar problemas a futuro:
git checkout master
git reset --hard <commit SHA de la versi√≥n a la queremos volver>
Esto restaura la rama principal (master) y mantiene la versi√≥n que queremos del proyecto
De ser posible, solo restaurar los archivos individuales. El comando git reset, es algo un poco m√°s avanzado, fuera del alcance de este taller b√°sico introductorio, pero lo pueden investigar por su cuenta.

7.6 git Branch:
Una rama (branch) es una l√≠nea independiente de desarrollo. La rama principal suele llamarse "main" o "master". Se pueden crear ramas para:
- Desarrollar nuevas funcionalidades.
- Corregir errores.
- Experimentar con c√≥digo.
- Trabajar en paralelo con otros desarrolladores.


7.6.1 git branch: Ver las ramas existentes. La rama que tiene un asterisco * es en la que nos encontramos.
7.6.2 git branch nombre-rama: Crear una nueva rama
7.6.3 git checkout nombre-rama: Cambiar a otra rama
7.6.4 git checkout -b nombre-rama: Crear y cambiar a una nueva rama
7.6.5 git merge nombre-rama: Fusionar una rama con la actual. 
7.6.6 git branch -D nombre-rama: Eliminar definitivamente una rama.

7.6.7 Buenas pr√°cticas:
- Usa nombres descriptivos y concisos: feature/login, fix/memory-leak
- Utiliza prefijos para categorizar: feature/, bugfix/, fix/, etc.
- Evita nombres ambiguos como nueva-rama o cambios
- Usa guiones o barras bajas, no espacios: feature/add-login o feature/add_login
- eliminar ramas que no se utilizan

7.6.8 Conflictos
Ocurren cuando el sistema no puede determinar autom√°ticamente c√≥mo combinar los cambios realizados en diferentes ramas o commits. Esto suele suceder cuando dos o m√°s personas trabajan simult√°neamente en el mismo archivo y modifican la misma l√≠nea o secci√≥n del c√≥digo. Cuando sucede, git nos muestra los conflictos a resolver para poder hacer el merge.
Despu√©s de resolver los conflictos, debemos ejecutar git add . y git commit -m . Esto completa el merge.

ejemplo: crear rama llamada feature/agregar-JS. crear bot√≥n en el HTML y dar clase botonJS. crear arhivo script.js con:

function sayHello() {
    console.log('Hola desde ac√° ‚å®Ô∏è');
}

boton.addEventListener('click', () => {
    alert('nada');
    document.body.style.backgroundColor = 'teal';
    document.body.style.color = 'black';
});


---
agregar script a HTML <script src="script.js" async></script>.
agregar bot√≥n 
<label for="botonJS"></label>
<input type="button" name="botonJS" id="botonJS" value="botonJS" /> 

hacer commit y merge con master
---


Para generar el conflicto cambiar:
cambiarse a rama feature/agregar-JS y en el js:
const boton = document.getElementById('botonJS');

function sayHello() {
    console.log('üòéüèçÔ∏è');
}

boton.addEventListener('click', () => {
    alert('Holas ‚òï');
    sayHello();
    console.log('‚úåüèºüéâüèçÔ∏è');
    document.body.style.backgroundColor = 'teal';
    document.body.style.color = 'black';
});


---
Resolver conflicto en el editor.
Eliminar rama secundaria.
---
